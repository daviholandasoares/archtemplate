AWSTemplateFormatVersion: '2010-09-09'
Description: PatientNow Service Pipelines

Parameters:
  Service:
    Description: The service
    Type: String
    Default: pn-mypatientnow
  Repository:
    Description: The full repository id
    Type: String
    Default: patientnow-inc/pn-mypatientnow
  Branch:
    Description: The branch
    Type: String
    Default: main

Mappings:
  Default:
    dev:
      Role: role-dev
    test:
      Role: role-test
    staging:
      Role: role-staging
    prod:
      Role: role-prod

Resources:

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${Service}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: "CodePipelineNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:GetBucketPolicy"
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactsBucket}
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/*
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource:
                  #- !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${UATTopic}
                  #- !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ProdTopic}
                  - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*
              - Effect: "Allow"
                Action:
                  - "codecommit:ListBranches"
                  - "codecommit:ListRepositories"
                  - "codecommit:BatchGetRepositories"
                  - "codecommit:Get*"
                  - "codecommit:GitPull"
                  - "codecommit:UploadArchive"
                Resource:
                  #- !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CFNTemplateRepoName}
                  #- !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${ValidateResourcesRepoName}
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:*
              - Effect: "Allow"
                Action:
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:CreateStack"
                  - "cloudformation:CreateUploadBucket"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:Describe*"
                  - "cloudformation:List*"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:ValidateTemplate"
                  - "cloudformation:ExecuteChangeSet"
                Resource:
                  # - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/Test-${Service}*
                  # - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/UAT-${Service}*
                  # - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/Prod-${Service}*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*
              - Effect: "Allow"
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource:
                  - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${Service}-BuildProject
                  # - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/ValidateResource-${Service}
                  - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/${Service}-BuildProject:*
                  #- !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/ValidateResource-${Service}:*
              - Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${Service}-CloudFormationRole
              - Effect: "Allow"
                Action:
                  #- "codestar-connections:PassConnection"
                  - "codestar-connections:UseConnection"
                Resource:
                  - !Sub arn:aws:codestar-connections::connection/

  CloudFormationRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        !Sub ${Service}-CloudFormationRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        -
          PolicyName: "CloudFormationNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "iam:AddRoleToInstanceProfile"
                  - "iam:AttachRolePolicy"
                  - "iam:CreateInstanceProfile"
                  - "iam:CreatePolicy"
                  - "iam:CreateRole"
                  - "iam:DeleteInstanceProfile"
                  - "iam:DeletePolicy"
                  - "iam:DeleteRole"
                  - "iam:DeleteRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:GetInstanceProfile"
                  - "iam:GetPolicy"
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                  - "iam:ListAttachedRolePolicies"
                  - "iam:ListInstanceProfiles"
                  - "iam:ListInstanceProfilesForRole"
                  - "iam:ListRolePolicies"
                  - "iam:ListRoles"
                  - "iam:PassRole"
                  - "iam:PutRolePolicy"
                  - "iam:RemoveRoleFromInstanceProfile"
                  - "iam:UpdateAssumeRolePolicy"
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${Service}*
              - Effect: "Allow"
                Action:
                  - "ec2:AttachInternetGateway"
                  - "ec2:AssociateRouteTable"
                  - "ec2:CreateRoute"
                  - "ec2:CreateRouteTable"
                  - "ec2:CreateSecurityGroup"
                  - "ec2:CreateSubnet"
                  - "ec2:CreateVpcEndpoint"
                  - "ec2:DeleteRoute"
                  - "ec2:DeleteRouteTable"
                  - "ec2:DeleteSubnet"
                  - "ec2:DeleteVpcEndpoints"
                  - "ec2:Describe*"
                  - "ec2:DetachInternetGateway"
                  - "ec2:DisassociateRouteTable"
                  - "ec2:ModifySubnetAttribute"
                  - "ec2:ModifyVpcAttribute"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:CreateListener"
                  - "elasticloadbalancing:CreateLoadBalancer"
                  - "elasticloadbalancing:CreateTargetGroup"
                  - "elasticloadbalancing:DeleteListener"
                  - "elasticloadbalancing:DeleteLoadBalancer"
                  - "elasticloadbalancing:DeleteTargetGroup"
                  - "elasticloadbalancing:ModifyTargetGroup"
                  - "elasticloadbalancing:ModifyTargetGroupAttributes"
                  - "autoscaling:CreateAutoScalingGroup"
                  - "autoscaling:CreateLaunchConfiguration"
                  - "autoscaling:Describe*"
                  - "ecs:CreateCluster"
                  - "ecs:CreateService"
                  - "ecs:DeleteCluster"
                  - "ecs:DeleteService"
                  - "ecs:DeregisterTaskDefinition"
                  - "ecs:DescribeServices"
                  - "ecs:DescribeTaskDefinition"
                  - "ecs:RegisterTaskDefinition"
                  - "ecs:UpdateService"
                  - "route53:*"
                  - "application-autoscaling:*"
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                  - "ec2:AllocateAddress"
                  - "ec2:AttachNetworkInterface"
                  - "ec2:AttachVolume"
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:CreateInternetGateway"
                  - "ec2:CreateNatGateway"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateTags"
                  - "ec2:CreateVolume"
                  - "ec2:CreateVpc"
                  - "ec2:DeleteInternetGateway"
                  - "ec2:DeleteNatGateway"
                  - "ec2:DeleteSecurityGroup"
                  - "ec2:DeleteTags"
                  - "ec2:DeleteVolume"
                  - "ec2:DeleteVpc"
                  - "ec2:DetachNetworkInterface"
                  - "ec2:DetachVolume"
                  - "ec2:MonitorInstances"
                  - "ec2:RebootInstances"
                  - "ec2:ReleaseAddress"
                  - "ec2:RunInstances"
                  - "ec2:StartInstances"
                  - "ec2:StopInstances"
                  - "ec2:TerminateInstances"
                  - "ec2:UnmonitorInstances"
                Resource:
                  - !Sub arn:aws:ec2:${AWS::Region}::image/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:internet-gateway/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:route-table/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:elastic-ip/*
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:natgateway/*
              - Effect: "Allow"
                Action:
                  - "iam:AddRoleToInstanceProfile"
                  - "iam:CreateInstanceProfile"
                  - "iam:DeleteInstanceProfile"
                  - "iam:GetInstanceProfile"
                  - "iam:ListInstanceProfiles"
                  - "iam:ListInstanceProfilesForRole"
                  - "iam:RemoveRoleFromInstanceProfile"
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/Test-${Service}-SecurityStack*
                  - !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/UAT-${Service}-SecurityStack*
                  - !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/Prod-${Service}-SecurityStack*
              - Effect: "Allow"
                Action:
                  - "rds:AddTagsToResource"
                  - "rds:CreateDBCluster"
                  - "rds:CreateDBClusterSnapshot"
                  - "rds:CreateDBInstance"
                  - "rds:CreateDBSecurityGroup"
                  - "rds:CreateDBSubnetGroup"
                  - "rds:DeleteDBCluster"
                  - "rds:DeleteDBInstance"
                  - "rds:DeleteDBSecurityGroup"
                  - "rds:DeleteDBSubnetGroup"
                  - "rds:DescribeDBClusters"
                  - "rds:DescribeDBClusterSnapshots"
                  - "rds:DescribeDBInstances"
                  - "rds:DescribeDBParameterGroups"
                  - "rds:DescribeDBParameters"
                  - "rds:DescribeDBSecurityGroups"
                  - "rds:DescribeDBSubnetGroups"
                  - "rds:DescribeOptionGroups"
                  - "rds:ModifyDBInstance"
                  - "rds:ModifyDBCluster"
                  - "rds:RebootDBInstance"
                  - "rds:RemoveTagsFromResource"
                Resource:
                  - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:*
                  - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:og:*
                  - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:pg:*
                  - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:secgrp:*
                  - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:subgrp:*
                  - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:*
                  - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster-snapshot:*
              - Effect: "Allow"
                Action:
                  - "elasticloadbalancing:AddTags"
                  - "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer"
                  - "elasticloadbalancing:AttachLoadBalancerToSubnets"
                  - "elasticloadbalancing:ConfigureHealthCheck"
                  - "elasticloadbalancing:CreateListener"
                  - "elasticloadbalancing:CreateLoadBalancerListeners"
                  - "elasticloadbalancing:CreateLoadBalancerPolicy"
                  - "elasticloadbalancing:DeleteListener"
                  - "elasticloadbalancing:DeleteLoadBalancer"
                  - "elasticloadbalancing:DeleteLoadBalancerListeners"
                  - "elasticloadbalancing:DeleteLoadBalancerPolicy"
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DetachLoadBalancerFromSubnets"
                  - "elasticloadbalancing:ModifyListener"
                  - "elasticloadbalancing:ModifyLoadBalancerAttributes"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RemoveTags"
                  - "elasticloadbalancing:SetSecurityGroups"
                  - "elasticloadbalancing:SetSubnets"
                  - "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
                  - "elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer"
                  - "elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer"
                Resource:
                  - !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/WebELB-*
                  - !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/app/${Service}-*
              - Effect: "Allow"
                Action:
                  - "autoscaling:AttachInstances"
                  - "autoscaling:AttachLoadBalancers"
                  - "autoscaling:CreateOrUpdateTags"
                  - "autoscaling:DeleteAutoScalingGroup"
                  - "autoscaling:DeleteLaunchConfiguration"
                  - "autoscaling:DeleteTags"
                  - "autoscaling:SetDesiredCapacity"
                  - "autoscaling:SetInstanceHealth"
                  - "autoscaling:TerminateInstanceInAutoScalingGroup"
                  - "autoscaling:UpdateAutoScalingGroup"
                Resource:
                  - !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/Test-${Service}-ServerStack-*
                  - !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/UAT-${Service}-ServerStack-*
                  - !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/Prod-${Service}-ServerStack-*
                  - !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:launchConfiguration:${AWS::AccountId}:*:Test-${Service}-ServerStack-*
                  - !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:launchConfiguration:${AWS::AccountId}:*:UAT-${Service}-ServerStack-*
                  - !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:launchConfiguration:${AWS::AccountId}:*:Prod-${Service}-ServerStack-*
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactsBucket}
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/*
              - Effect: "Allow"
                Action:
                  - "ecs:*"
                Resource:
                  - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${Service}-*
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:DeleteLogGroup"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${Service}-*
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !Sub arn:aws:s3:::${Service}
                  - !Sub arn:aws:s3:::${Service}/*
              - Effect: "Allow"
                Action:
                  - "dynamodb:*"
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Service}-*
              - Effect: "Allow"
                Action:
                  - "sqs:*"
                Resource:
                  - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Service}-*
              - Effect: "Allow"
                Action:
                  - "lambda:*"
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Service}-*  
              - Effect: "Allow"
                Action:
                  - "lambda:CreateEventSourceMapping"
                  - "lambda:DeleteEventSourceMapping"
                  - "lambda:GetEventSourceMapping"
                  - "lambda:ListEventSourceMappings"
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                  - "ecr:*"
                Resource:
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Service}
                  - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Service}-lambdas
  
  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        !Sub ${Service}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        - PolicyName: "CodeBuildNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloudformation:Get*"
                  - "cloudformation:Describe*"
                  - "cloudformation:List*"
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/Test-${Service}*
              - Effect: "Allow"
                Action:
                  - "codecommit:ListBranches"
                  - "codecommit:ListRepositories"
                  - "codecommit:BatchGetRepositories"
                  - "codecommit:Get*"
                  - "codecommit:GitPull"
                Resource:
                  #- !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CFNTemplateRepoName}
                  #- !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${ValidateResourcesRepoName}
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:*
              - Effect: "Allow"
                Action:
                  - "ec2:Describe*"
                  - "cloudformation:ValidateTemplate"
                  - "elasticloadbalancing:Describe*"
                  - "autoscaling:Describe*"
                  - "iam:Get*"
                  - "iam:List*"
                  - "logs:Describe*"
                  - "logs:Get*"
                  - "tag:Get*"
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                Resource:
                  - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
                  - !Sub arn:aws:s3:::${ArtifactsBucket}/*
                  - !Sub arn:aws:s3:::${ArtifactsBucket}
              - Effect: "Allow"
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:PutImage"
                  - "ecr:UploadLayerPart"
                Resource:
                  - "*"

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Service}-artifacts
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      Tags:
        - Key: Service
          Value: !Ref Service

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${Service}
      ImageTagMutability: IMMUTABLE
      Tags:
        - Key: Service
          Value: !Ref Service
  ECRRepositoryLambdas:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${Service}-lambdas
      ImageTagMutability: IMMUTABLE
      Tags:
        - Key: Service
          Value: !Ref Service

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${Service}-BuildProject
      Description: PatientNow Service build project
      ServiceRole:
        !GetAtt [ CodeBuildRole, Arn ]
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Sub ${AWS::Region}
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: IMAGE_REPO_NAME
            Value: !Sub ${Service}
          - Name: IMAGE_REPO_NAME_LAMBDAS
            Value: !Sub ${Service}-lambdas
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 15
      #EncryptionKey: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3
      Tags:
        - Key: Name
          Value: !Sub ${Service}-BuildProject

  DeployPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub ${Service}
      RoleArn: !GetAtt [ CodePipelineRole, Arn ]
      Stages:
        - Name: GetSourceStage
          Actions:
            - Name: GetSourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: GetSourceOutput
              Configuration:
                ConnectionArn: "arn:aws:codestar-connections::connection/"
                FullRepositoryId: !Ref Repository
                BranchName: !Ref Branch
                OutputArtifactFormat: "CODE_ZIP"
              RunOrder: 1

        - Name: BuildStage
          Actions:
            - Name: BuildAction
              InputArtifacts:
                - Name: GetSourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Namespace: BuildStageVars
              OutputArtifacts:
                - Name: BuildStageOutput
              Configuration: 
                ProjectName:
                  Ref: BuildProject
              RunOrder: 1

        - Name: DevStage
          Actions:
            - Name: UpdateResourcesAction
              InputArtifacts:
                - Name: BuildStageOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              OutputArtifacts:
                - Name: UpdateResourcesOutputDev
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt [ CloudFormationRole, Arn ]
                Capabilities: CAPABILITY_NAMED_IAM
                StackName: !Sub ${Service}-dev-Resources
                TemplateConfiguration: !Sub BuildStageOutput::template_configuration.json
                TemplatePath: BuildStageOutput::template.yml
                ParameterOverrides: !Sub '{"Service": "${Service}", "Environment": "dev", "ImageTag": "#{BuildStageVars.IMAGE_TAG}"}'
              RunOrder: 1

        - Name: TestStage
          Actions:
            - Name: UpdateResourcesAction
              InputArtifacts:
                - Name: BuildStageOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              OutputArtifacts:
                - Name: UpdateResourcesOutputTest
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt [ CloudFormationRole, Arn ]
                Capabilities: CAPABILITY_NAMED_IAM
                StackName: !Sub ${Service}-test-Resources
                TemplateConfiguration: !Sub BuildStageOutput::template_configuration.json
                TemplatePath: BuildStageOutput::template.yml
                ParameterOverrides: !Sub '{"Service": "${Service}", "Environment": "test", "ImageTag": "#{BuildStageVars.IMAGE_TAG}"}'
              RunOrder: 1

      ArtifactStore:
        Type: S3
        Location:
          Ref: ArtifactsBucket